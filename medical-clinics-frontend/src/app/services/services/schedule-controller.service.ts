/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { generateSchedule } from '../fn/schedule-controller/generate-schedule';
import { GenerateSchedule$Params } from '../fn/schedule-controller/generate-schedule';
import { getPatientAppointments } from '../fn/schedule-controller/get-patient-appointments';
import { GetPatientAppointments$Params } from '../fn/schedule-controller/get-patient-appointments';
import { getPhysicianSchedules } from '../fn/schedule-controller/get-physician-schedules';
import { GetPhysicianSchedules$Params } from '../fn/schedule-controller/get-physician-schedules';
import { getPublicPhysicianSchedules } from '../fn/schedule-controller/get-public-physician-schedules';
import { GetPublicPhysicianSchedules$Params } from '../fn/schedule-controller/get-public-physician-schedules';
import { inactivateSchedule } from '../fn/schedule-controller/inactivate-schedule';
import { InactivateSchedule$Params } from '../fn/schedule-controller/inactivate-schedule';
import { inactivateTimeslot } from '../fn/schedule-controller/inactivate-timeslot';
import { InactivateTimeslot$Params } from '../fn/schedule-controller/inactivate-timeslot';
import { makeAppointment } from '../fn/schedule-controller/make-appointment';
import { MakeAppointment$Params } from '../fn/schedule-controller/make-appointment';
import { PatientAppointment } from '../models/patient-appointment';
import { PhysicianDaySchedulePrivate } from '../models/physician-day-schedule-private';
import { PhysicianDaySchedulePublic } from '../models/physician-day-schedule-public';
import { releaseAppointment } from '../fn/schedule-controller/release-appointment';
import { ReleaseAppointment$Params } from '../fn/schedule-controller/release-appointment';

@Injectable({ providedIn: 'root' })
export class ScheduleControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `generateSchedule()` */
  static readonly GenerateSchedulePath = '/schedules/new/physician/{accountId}';

  /**
   * Generate physician schedule.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `generateSchedule()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  generateSchedule$Response(params: GenerateSchedule$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return generateSchedule(this.http, this.rootUrl, params, context);
  }

  /**
   * Generate physician schedule.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `generateSchedule$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  generateSchedule(params: GenerateSchedule$Params, context?: HttpContext): Observable<void> {
    return this.generateSchedule$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `inactivateTimeslot()` */
  static readonly InactivateTimeslotPath = '/schedules/timeslot/{timeslotId}';

  /**
   * Block timeslot.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inactivateTimeslot()` instead.
   *
   * This method doesn't expect any request body.
   */
  inactivateTimeslot$Response(params: InactivateTimeslot$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return inactivateTimeslot(this.http, this.rootUrl, params, context);
  }

  /**
   * Block timeslot.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inactivateTimeslot$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inactivateTimeslot(params: InactivateTimeslot$Params, context?: HttpContext): Observable<void> {
    return this.inactivateTimeslot$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getPhysicianSchedules()` */
  static readonly GetPhysicianSchedulesPath = '/schedules/physician/{accountId}';

  /**
   * Get list of physician schedules with appointed patients.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPhysicianSchedules()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhysicianSchedules$Response(params: GetPhysicianSchedules$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PhysicianDaySchedulePrivate>>> {
    return getPhysicianSchedules(this.http, this.rootUrl, params, context);
  }

  /**
   * Get list of physician schedules with appointed patients.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPhysicianSchedules$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhysicianSchedules(params: GetPhysicianSchedules$Params, context?: HttpContext): Observable<Array<PhysicianDaySchedulePrivate>> {
    return this.getPhysicianSchedules$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PhysicianDaySchedulePrivate>>): Array<PhysicianDaySchedulePrivate> => r.body)
    );
  }

  /** Path part for operation `inactivateSchedule()` */
  static readonly InactivateSchedulePath = '/schedules/physician/{accountId}';

  /**
   * Block day schedule.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `inactivateSchedule()` instead.
   *
   * This method doesn't expect any request body.
   */
  inactivateSchedule$Response(params: InactivateSchedule$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return inactivateSchedule(this.http, this.rootUrl, params, context);
  }

  /**
   * Block day schedule.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `inactivateSchedule$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  inactivateSchedule(params: InactivateSchedule$Params, context?: HttpContext): Observable<void> {
    return this.inactivateSchedule$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `releaseAppointment()` */
  static readonly ReleaseAppointmentPath = '/schedules/appointments/{timeslotId}';

  /**
   * Release timeslot (remove appointment).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `releaseAppointment()` instead.
   *
   * This method doesn't expect any request body.
   */
  releaseAppointment$Response(params: ReleaseAppointment$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return releaseAppointment(this.http, this.rootUrl, params, context);
  }

  /**
   * Release timeslot (remove appointment).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `releaseAppointment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  releaseAppointment(params: ReleaseAppointment$Params, context?: HttpContext): Observable<void> {
    return this.releaseAppointment$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `makeAppointment()` */
  static readonly MakeAppointmentPath = '/schedules/appointments/{timeslotId}';

  /**
   * Reserve timeslot (make appointment).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `makeAppointment()` instead.
   *
   * This method doesn't expect any request body.
   */
  makeAppointment$Response(params: MakeAppointment$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return makeAppointment(this.http, this.rootUrl, params, context);
  }

  /**
   * Reserve timeslot (make appointment).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `makeAppointment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  makeAppointment(params: MakeAppointment$Params, context?: HttpContext): Observable<void> {
    return this.makeAppointment$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getPatientAppointments()` */
  static readonly GetPatientAppointmentsPath = '/schedules/patient/{patientId}';

  /**
   * Get list of patient appointments.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPatientAppointments()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPatientAppointments$Response(params: GetPatientAppointments$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PatientAppointment>>> {
    return getPatientAppointments(this.http, this.rootUrl, params, context);
  }

  /**
   * Get list of patient appointments.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPatientAppointments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPatientAppointments(params: GetPatientAppointments$Params, context?: HttpContext): Observable<Array<PatientAppointment>> {
    return this.getPatientAppointments$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PatientAppointment>>): Array<PatientAppointment> => r.body)
    );
  }

  /** Path part for operation `getPublicPhysicianSchedules()` */
  static readonly GetPublicPhysicianSchedulesPath = '/schedules/';

  /**
   * Get list of physician schedules.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPublicPhysicianSchedules()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPublicPhysicianSchedules$Response(params: GetPublicPhysicianSchedules$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PhysicianDaySchedulePublic>>> {
    return getPublicPhysicianSchedules(this.http, this.rootUrl, params, context);
  }

  /**
   * Get list of physician schedules.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPublicPhysicianSchedules$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPublicPhysicianSchedules(params: GetPublicPhysicianSchedules$Params, context?: HttpContext): Observable<Array<PhysicianDaySchedulePublic>> {
    return this.getPublicPhysicianSchedules$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PhysicianDaySchedulePublic>>): Array<PhysicianDaySchedulePublic> => r.body)
    );
  }

}
