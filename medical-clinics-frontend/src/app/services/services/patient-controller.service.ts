/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addPatient } from '../fn/patient-controller/add-patient';
import { AddPatient$Params } from '../fn/patient-controller/add-patient';
import { findPatient } from '../fn/patient-controller/find-patient';
import { FindPatient$Params } from '../fn/patient-controller/find-patient';
import { getPatient } from '../fn/patient-controller/get-patient';
import { GetPatient$Params } from '../fn/patient-controller/get-patient';
import { PatientInfo } from '../models/patient-info';
import { setPatientCountryAndIdentificationCode } from '../fn/patient-controller/set-patient-country-and-identification-code';
import { SetPatientCountryAndIdentificationCode$Params } from '../fn/patient-controller/set-patient-country-and-identification-code';

@Injectable({ providedIn: 'root' })
export class PatientControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getPatient()` */
  static readonly GetPatientPath = '/patients/patient/{patientId}';

  /**
   * Get specific patient information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPatient()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPatient$Response(params: GetPatient$Params, context?: HttpContext): Observable<StrictHttpResponse<PatientInfo>> {
    return getPatient(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific patient information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPatient$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPatient(params: GetPatient$Params, context?: HttpContext): Observable<PatientInfo> {
    return this.getPatient$Response(params, context).pipe(
      map((r: StrictHttpResponse<PatientInfo>): PatientInfo => r.body)
    );
  }

  /** Path part for operation `setPatientCountryAndIdentificationCode()` */
  static readonly SetPatientCountryAndIdentificationCodePath = '/patients/patient/{patientId}';

  /**
   * Set patient country and identification code required for creation of new note.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `setPatientCountryAndIdentificationCode()` instead.
   *
   * This method doesn't expect any request body.
   */
  setPatientCountryAndIdentificationCode$Response(params: SetPatientCountryAndIdentificationCode$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return setPatientCountryAndIdentificationCode(this.http, this.rootUrl, params, context);
  }

  /**
   * Set patient country and identification code required for creation of new note.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `setPatientCountryAndIdentificationCode$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  setPatientCountryAndIdentificationCode(params: SetPatientCountryAndIdentificationCode$Params, context?: HttpContext): Observable<void> {
    return this.setPatientCountryAndIdentificationCode$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `addPatient()` */
  static readonly AddPatientPath = '/patients/patient/new';

  /**
   * Create new patient.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPatient()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPatient$Response(params: AddPatient$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return addPatient(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new patient.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPatient$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPatient(params: AddPatient$Params, context?: HttpContext): Observable<void> {
    return this.addPatient$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `findPatient()` */
  static readonly FindPatientPath = '/patients/filter';

  /**
   * Filters patient information by optional parameters:
   *         phone, email and country and identification code of the patient.
   *         Returns list with one patient if presented parameters find same patient.
   *         Returns list of patients if the phone number a email or
   *         country and identification belong to different patients.
   *         Returns empty list if no patient is found for each presented parameter;
   * .
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findPatient()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPatient$Response(params?: FindPatient$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PatientInfo>>> {
    return findPatient(this.http, this.rootUrl, params, context);
  }

  /**
   * Filters patient information by optional parameters:
   *         phone, email and country and identification code of the patient.
   *         Returns list with one patient if presented parameters find same patient.
   *         Returns list of patients if the phone number a email or
   *         country and identification belong to different patients.
   *         Returns empty list if no patient is found for each presented parameter;
   * .
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findPatient$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPatient(params?: FindPatient$Params, context?: HttpContext): Observable<Array<PatientInfo>> {
    return this.findPatient$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PatientInfo>>): Array<PatientInfo> => r.body)
    );
  }

}
