/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AccountInformation } from '../models/account-information';
import { blockUserAccount } from '../fn/user-account-controller/block-user-account';
import { BlockUserAccount$Params } from '../fn/user-account-controller/block-user-account';
import { deleteUserAccount } from '../fn/user-account-controller/delete-user-account';
import { DeleteUserAccount$Params } from '../fn/user-account-controller/delete-user-account';
import { getAllUsersAccounts } from '../fn/user-account-controller/get-all-users-accounts';
import { GetAllUsersAccounts$Params } from '../fn/user-account-controller/get-all-users-accounts';
import { switchRole } from '../fn/user-account-controller/switch-role';
import { SwitchRole$Params } from '../fn/user-account-controller/switch-role';
import { updateUserAccount } from '../fn/user-account-controller/update-user-account';
import { UpdateUserAccount$Params } from '../fn/user-account-controller/update-user-account';

@Injectable({ providedIn: 'root' })
export class UserAccountControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateUserAccount()` */
  static readonly UpdateUserAccountPath = '/users/user/{accountId}';

  /**
   * Update user information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUserAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserAccount$Response(params: UpdateUserAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateUserAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Update user information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUserAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserAccount(params: UpdateUserAccount$Params, context?: HttpContext): Observable<void> {
    return this.updateUserAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteUserAccount()` */
  static readonly DeleteUserAccountPath = '/users/user/{accountId}';

  /**
   * Delete (inactivate) user account.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUserAccount()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserAccount$Response(params: DeleteUserAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteUserAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete (inactivate) user account.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUserAccount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserAccount(params: DeleteUserAccount$Params, context?: HttpContext): Observable<void> {
    return this.deleteUserAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `switchRole()` */
  static readonly SwitchRolePath = '/users/user/{accountId}';

  /**
   * Update user role.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `switchRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  switchRole$Response(params: SwitchRole$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return switchRole(this.http, this.rootUrl, params, context);
  }

  /**
   * Update user role.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `switchRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  switchRole(params: SwitchRole$Params, context?: HttpContext): Observable<void> {
    return this.switchRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `blockUserAccount()` */
  static readonly BlockUserAccountPath = '/users/user/ban/{accountId}';

  /**
   * Block user account.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `blockUserAccount()` instead.
   *
   * This method doesn't expect any request body.
   */
  blockUserAccount$Response(params: BlockUserAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return blockUserAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Block user account.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `blockUserAccount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  blockUserAccount(params: BlockUserAccount$Params, context?: HttpContext): Observable<void> {
    return this.blockUserAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllUsersAccounts()` */
  static readonly GetAllUsersAccountsPath = '/users/';

  /**
   * Get all users information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsersAccounts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsersAccounts$Response(params?: GetAllUsersAccounts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AccountInformation>>> {
    return getAllUsersAccounts(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all users information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsersAccounts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsersAccounts(params?: GetAllUsersAccounts$Params, context?: HttpContext): Observable<Array<AccountInformation>> {
    return this.getAllUsersAccounts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AccountInformation>>): Array<AccountInformation> => r.body)
    );
  }

}
