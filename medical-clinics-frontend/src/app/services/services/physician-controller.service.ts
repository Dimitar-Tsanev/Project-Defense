/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addPhysician } from '../fn/physician-controller/add-physician';
import { AddPhysician$Params } from '../fn/physician-controller/add-physician';
import { dismissPhysician } from '../fn/physician-controller/dismiss-physician';
import { DismissPhysician$Params } from '../fn/physician-controller/dismiss-physician';
import { getPhysicianInfo } from '../fn/physician-controller/get-physician-info';
import { GetPhysicianInfo$Params } from '../fn/physician-controller/get-physician-info';
import { getPhysiciansByClinicAndSpeciality } from '../fn/physician-controller/get-physicians-by-clinic-and-speciality';
import { GetPhysiciansByClinicAndSpeciality$Params } from '../fn/physician-controller/get-physicians-by-clinic-and-speciality';
import { PhysicianInfo } from '../models/physician-info';
import { updatePhysician } from '../fn/physician-controller/update-physician';
import { UpdatePhysician$Params } from '../fn/physician-controller/update-physician';

@Injectable({ providedIn: 'root' })
export class PhysicianControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getPhysicianInfo()` */
  static readonly GetPhysicianInfoPath = '/physicians/physician/{physicianId}';

  /**
   * Get specific physician information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPhysicianInfo()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhysicianInfo$Response(params: GetPhysicianInfo$Params, context?: HttpContext): Observable<StrictHttpResponse<PhysicianInfo>> {
    return getPhysicianInfo(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific physician information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPhysicianInfo$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhysicianInfo(params: GetPhysicianInfo$Params, context?: HttpContext): Observable<PhysicianInfo> {
    return this.getPhysicianInfo$Response(params, context).pipe(
      map((r: StrictHttpResponse<PhysicianInfo>): PhysicianInfo => r.body)
    );
  }

  /** Path part for operation `updatePhysician()` */
  static readonly UpdatePhysicianPath = '/physicians/physician/{physicianId}';

  /**
   * Update physician information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updatePhysician()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePhysician$Response(params: UpdatePhysician$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updatePhysician(this.http, this.rootUrl, params, context);
  }

  /**
   * Update physician information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updatePhysician$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updatePhysician(params: UpdatePhysician$Params, context?: HttpContext): Observable<void> {
    return this.updatePhysician$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `dismissPhysician()` */
  static readonly DismissPhysicianPath = '/physicians/physician/{physicianId}';

  /**
   * Dismiss physician set workplace to null.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `dismissPhysician()` instead.
   *
   * This method doesn't expect any request body.
   */
  dismissPhysician$Response(params: DismissPhysician$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return dismissPhysician(this.http, this.rootUrl, params, context);
  }

  /**
   * Dismiss physician set workplace to null.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `dismissPhysician$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  dismissPhysician(params: DismissPhysician$Params, context?: HttpContext): Observable<void> {
    return this.dismissPhysician$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `addPhysician()` */
  static readonly AddPhysicianPath = '/physicians/physician/new';

  /**
   * Create new physician.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addPhysician()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPhysician$Response(params: AddPhysician$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return addPhysician(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new physician.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addPhysician$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addPhysician(params: AddPhysician$Params, context?: HttpContext): Observable<void> {
    return this.addPhysician$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getPhysiciansByClinicAndSpeciality()` */
  static readonly GetPhysiciansByClinicAndSpecialityPath = '/physicians/{clinicId}/{specialityId}';

  /**
   * Get list of physicians by there workplace ( clinicId ) and speciality (specialityId).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPhysiciansByClinicAndSpeciality()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhysiciansByClinicAndSpeciality$Response(params: GetPhysiciansByClinicAndSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PhysicianInfo>>> {
    return getPhysiciansByClinicAndSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * Get list of physicians by there workplace ( clinicId ) and speciality (specialityId).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPhysiciansByClinicAndSpeciality$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhysiciansByClinicAndSpeciality(params: GetPhysiciansByClinicAndSpeciality$Params, context?: HttpContext): Observable<Array<PhysicianInfo>> {
    return this.getPhysiciansByClinicAndSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PhysicianInfo>>): Array<PhysicianInfo> => r.body)
    );
  }

}
