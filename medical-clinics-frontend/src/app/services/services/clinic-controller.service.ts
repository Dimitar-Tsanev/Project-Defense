/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addNewClinic } from '../fn/clinic-controller/add-new-clinic';
import { AddNewClinic$Params } from '../fn/clinic-controller/add-new-clinic';
import { ClinicDetails } from '../models/clinic-details';
import { ClinicShortInfo } from '../models/clinic-short-info';
import { deleteClinic } from '../fn/clinic-controller/delete-clinic';
import { DeleteClinic$Params } from '../fn/clinic-controller/delete-clinic';
import { editClinic } from '../fn/clinic-controller/edit-clinic';
import { EditClinic$Params } from '../fn/clinic-controller/edit-clinic';
import { getAllClinics } from '../fn/clinic-controller/get-all-clinics';
import { GetAllClinics$Params } from '../fn/clinic-controller/get-all-clinics';
import { getClinicInfo } from '../fn/clinic-controller/get-clinic-info';
import { GetClinicInfo$Params } from '../fn/clinic-controller/get-clinic-info';

@Injectable({ providedIn: 'root' })
export class ClinicControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getClinicInfo()` */
  static readonly GetClinicInfoPath = '/clinics/clinic/{clinicId}';

  /**
   * Get specific clinic detailed information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getClinicInfo()` instead.
   *
   * This method doesn't expect any request body.
   */
  getClinicInfo$Response(params: GetClinicInfo$Params, context?: HttpContext): Observable<StrictHttpResponse<ClinicDetails>> {
    return getClinicInfo(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific clinic detailed information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getClinicInfo$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getClinicInfo(params: GetClinicInfo$Params, context?: HttpContext): Observable<ClinicDetails> {
    return this.getClinicInfo$Response(params, context).pipe(
      map((r: StrictHttpResponse<ClinicDetails>): ClinicDetails => r.body)
    );
  }

  /** Path part for operation `editClinic()` */
  static readonly EditClinicPath = '/clinics/clinic/{clinicId}';

  /**
   * Update clinic information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `editClinic()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  editClinic$Response(params: EditClinic$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return editClinic(this.http, this.rootUrl, params, context);
  }

  /**
   * Update clinic information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `editClinic$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  editClinic(params: EditClinic$Params, context?: HttpContext): Observable<void> {
    return this.editClinic$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteClinic()` */
  static readonly DeleteClinicPath = '/clinics/clinic/{clinicId}';

  /**
   * Delete clinic information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteClinic()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteClinic$Response(params: DeleteClinic$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteClinic(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete clinic information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteClinic$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteClinic(params: DeleteClinic$Params, context?: HttpContext): Observable<void> {
    return this.deleteClinic$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `addNewClinic()` */
  static readonly AddNewClinicPath = '/clinics/clinic/new';

  /**
   * Create new clinic.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addNewClinic()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewClinic$Response(params: AddNewClinic$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return addNewClinic(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new clinic.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addNewClinic$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewClinic(params: AddNewClinic$Params, context?: HttpContext): Observable<void> {
    return this.addNewClinic$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllClinics()` */
  static readonly GetAllClinicsPath = '/clinics/';

  /**
   * Get all clinics short information.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllClinics()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClinics$Response(params?: GetAllClinics$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ClinicShortInfo>>> {
    return getAllClinics(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all clinics short information.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllClinics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllClinics(params?: GetAllClinics$Params, context?: HttpContext): Observable<Array<ClinicShortInfo>> {
    return this.getAllClinics$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ClinicShortInfo>>): Array<ClinicShortInfo> => r.body)
    );
  }

}
