/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addNewNote } from '../fn/medical-record-controller/add-new-note';
import { AddNewNote$Params } from '../fn/medical-record-controller/add-new-note';
import { getNote } from '../fn/medical-record-controller/get-note';
import { GetNote$Params } from '../fn/medical-record-controller/get-note';
import { getPatientRecord } from '../fn/medical-record-controller/get-patient-record';
import { GetPatientRecord$Params } from '../fn/medical-record-controller/get-patient-record';
import { getPhysicianNotes } from '../fn/medical-record-controller/get-physician-notes';
import { GetPhysicianNotes$Params } from '../fn/medical-record-controller/get-physician-notes';
import { NoteResponse } from '../models/note-response';

@Injectable({ providedIn: 'root' })
export class MedicalRecordControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addNewNote()` */
  static readonly AddNewNotePath = '/medical-records/note/new/physician/{accountId}';

  /**
   * Create new medical record note.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addNewNote()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewNote$Response(params: AddNewNote$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return addNewNote(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new medical record note.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addNewNote$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewNote(params: AddNewNote$Params, context?: HttpContext): Observable<void> {
    return this.addNewNote$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getPhysicianNotes()` */
  static readonly GetPhysicianNotesPath = '/medical-records/physician/{accountId}';

  /**
   * Get all physician notes by physician id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPhysicianNotes()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhysicianNotes$Response(params: GetPhysicianNotes$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<NoteResponse>>> {
    return getPhysicianNotes(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all physician notes by physician id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPhysicianNotes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhysicianNotes(params: GetPhysicianNotes$Params, context?: HttpContext): Observable<Array<NoteResponse>> {
    return this.getPhysicianNotes$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<NoteResponse>>): Array<NoteResponse> => r.body)
    );
  }

  /** Path part for operation `getPatientRecord()` */
  static readonly GetPatientRecordPath = '/medical-records/patient/{patientId}';

  /**
   * Get a patient medical record by patient id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPatientRecord()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPatientRecord$Response(params: GetPatientRecord$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<NoteResponse>>> {
    return getPatientRecord(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a patient medical record by patient id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPatientRecord$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPatientRecord(params: GetPatientRecord$Params, context?: HttpContext): Observable<Array<NoteResponse>> {
    return this.getPatientRecord$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<NoteResponse>>): Array<NoteResponse> => r.body)
    );
  }

  /** Path part for operation `getNote()` */
  static readonly GetNotePath = '/medical-records/note/{noteId}';

  /**
   * Get a not by it's id.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getNote()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNote$Response(params: GetNote$Params, context?: HttpContext): Observable<StrictHttpResponse<NoteResponse>> {
    return getNote(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a not by it's id.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getNote$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNote(params: GetNote$Params, context?: HttpContext): Observable<NoteResponse> {
    return this.getNote$Response(params, context).pipe(
      map((r: StrictHttpResponse<NoteResponse>): NoteResponse => r.body)
    );
  }

}
